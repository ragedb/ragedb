name: Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - uses: actions/checkout@master
        with:
          repository: ragedb/rage-assured
          path: rage-assured    

      - name: update container base
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y
          sudo apt-get install -y git sudo pkg-config ccache python3-pip luajit luajit-5.1-dev

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"

      - name: install g++-11
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt install -y g++-11
          sudo update-alternatives \
            --install /usr/bin/gcc gcc /usr/bin/gcc-11 60 \
            --slave /usr/bin/g++ g++ /usr/bin/g++-11 \
            --slave /usr/bin/gcov gcov /usr/bin/gcov-11
          sudo update-alternatives --auto gcc

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.type }}

      - uses: actions/checkout@master
        with:
          repository: scylladb/seastar
          path: seastar

      - name: install dependencies
        run: |
          cd seastar
          sudo ./install-dependencies.sh
          ./configure.py --mode=release --prefix=/usr/local --c++-dialect=gnu++20 --without-tests
          sudo ninja -C build/release install

      - name: build with cmake
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache'
          buildWithCMake: true
          buildDirectory: '${{ github.workspace }}/build'
        
      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Upload coverage report
        working-directory: ${{github.workspace}}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          sudo apt install python3-setuptools python3-idna python3-requests python3-urllib3
          git clone https://github.com/PredatorCZ/cpp-coveralls.git
          pushd cpp-coveralls
          sudo python3 setup.py install
          popd
          export COVERALLS_SERVICE_NAME="github-workflows"
          coveralls -E ".*/build/.*.c((pp)|(c)|(xx))?$" -e test -e seastar -e fuzz_test -e cmake --gcov-options '\-lp' > /dev/null
