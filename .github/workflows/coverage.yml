name: Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  CC: /usr/bin/gcc-11
  CXX: /usr/bin/g++-11

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747 # Find the latest version in the "Linux" link on this page:
                                        # https://docs.sonarcloud.io/advanced-setup/ci-based-analysis/sonarscanner-cli/
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v3
        with:
         fetch-depth: 0

      - name: update container base
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get -qq update -y
          sudo apt-get -qq install -y git sudo pkg-config ccache python3-pip luajit luajit-5.1-dev libcrypto++8 libcrypto++-dev

      - name: install g++-11
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt install -y g++-11
          sudo update-alternatives \
            --install /usr/bin/gcc gcc /usr/bin/gcc-11 100 \
            --slave /usr/bin/g++ g++ /usr/bin/g++-11 \
            --slave /usr/bin/gcov gcov /usr/bin/gcov-11
          sudo update-alternatives --auto gcc

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.type }}

      - uses: actions/checkout@master
        with:
          repository: scylladb/seastar
          path: seastar
          ref: 16b0942bb84e2329866c99913f37525289cd47f5

      - name: install dependencies
        run: |
          cd seastar
          sudo ./install-dependencies.sh
          ./configure.py --mode=release --prefix=/usr/local --c++-dialect=c++20 --compiler=g++-11 --c-compiler=gcc-11 --without-tests --without-apps --without-demos
          sudo ninja -C build/release install
 
      - name: Install Conan
        run: |
          python -m pip install conan
          conan profile new default --detect
          export CC=/usr/bin/gcc-11
          export CXX=/usr/bin/g++-11
          conan profile update settings.compiler.version=11 default

      - name: luajit recipe
        uses: actions/checkout@main
        with:
          repository: ragedb/luajit-recipe
          path: luajit

      - name: sol recipe
        uses: actions/checkout@main
        with:
          repository: ragedb/sol2-recipe
          path: sol2

      - name: eve recipe
        uses: actions/checkout@main
        with:
          repository: ragedb/eve-recipe
          path: eve

      - name: install custom conan recipes
        run: |
          cd luajit
          CC=/usr/bin/gcc-11 CXX=/usr/bin/g++-11 conan create . 2.1.0-beta3-2022-7-22@
          cd ../sol2
          CC=/usr/bin/gcc-11 CXX=/usr/bin/g++-11 conan create . 3.3.0-luajit@
          cd ../eve
          CC=/usr/bin/gcc-11 CXX=/usr/bin/g++-11 conan create . v2021.10.0@
          CC=/usr/bin/gcc-11 CXX=/usr/bin/g++-11 conan create . v2022.03.0@
      
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage  -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-11
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Debug

      - name: Test
        working-directory: '${{ github.workspace }}/build'
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --output-on-failure --success
        
      - name: SonarQube
        working-directory: '${{ github.workspace }}/build'
        run: |        
          sudo pip install gcovr
          gcovr -r .. --sonarqube coverage.xml
          mv coverage.xml ..

      - name: Upload coverage report
        working-directory: ${{github.workspace}}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          sudo apt install python3-setuptools python3-idna python3-requests python3-urllib3
          git clone https://github.com/PredatorCZ/cpp-coveralls.git
          pushd cpp-coveralls
          sudo python3 setup.py install
          popd
          export COVERALLS_SERVICE_NAME="github-workflows"
          coveralls -E ".*/build/.*.c((pp)|(c)|(xx))?$" -e test -e seastar -e fuzz_test -e cmake --gcov /usr/bin/gcov-11 --gcov-options '\-lp' > /dev/null

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
